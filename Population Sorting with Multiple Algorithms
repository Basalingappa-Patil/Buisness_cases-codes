#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
using namespace std;

// Struct to represent an individual
struct Person {
    int age;
    bool employed; // true = employed, false = unemployed
};

// Bubble Sort
void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[low];
    int i = low, j = high + 1;
    while (true) {
        do { i++; } while (i <= high && arr[i] < pivot);
        do { j--; } while (arr[j] > pivot);
        if (i >= j) break;
        swap(arr[i], arr[j]);
    }
    swap(arr[low], arr[j]);
    return j;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high);
        quickSort(arr, low, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, high);
    }
}

// Other sort implementations omitted for brevity (e.g., mergeSort, heapSort).
// Continue on request...

// Main function was included for testing and analysis of performance.
